# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

import sys
import inspect
import os
import sys
import sphinx_rtd_theme
import ast
from spb.doc_utils import (
    _modify_code, _modify_iplot_code, postprocess_KB_interactive_image
)

sys.path.insert(0, os.path.abspath('../../'))

# -- Project information -----------------------------------------------------

project = 'Sympy Plotting Backends'
copyright = '2021, Davide Sandona\''
author = 'Davide Sandona\''

here = os.path.dirname(__file__)
repo = os.path.join(here, '..', '..')
_version_py = os.path.join(repo, 'spb', '_version.py')
version_ns = {}
with open(_version_py) as f:
    exec (f.read(), version_ns)

v = version_ns["__version__"]
# The short X.Y version
version = ".".join(v.split(".")[:-1])
# The full version, including alpha/beta/rc tags
release = v


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.linkcode',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.mathjax',
    'numpydoc',
    'sphinx.ext.viewcode',
    'matplotlib.sphinxext.plot_directive',
    'sphinx_rtd_theme',
    'sphinx_plotly_directive',
    'sphinx_panel_screenshot',
    'sphinx_k3d_screenshot',
    'sphinx_math_dollar'
]

# nbsphinx_allow_errors = True

# hide the table inside classes autodoc
numpydoc_show_class_members = False

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = [
    '_static',
    '_static/tut-1',
    '_static/tut-2',
    '_static/tut-3',
    '_static/tut-4',
    '_static/tut-5',
]

# html_js_files = [
# ]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'SympyPlottingBackendsdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'SympyPlottingBackends.tex', 'Sympy Plotting Backends Documentation',
     'Davide Sandona\'', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'sympyplottingbackends', 'Sympy Plotting Backends Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'SympyPlottingBackends', 'Sympy Plotting Backends Documentation',
     author, 'SympyPlottingBackends', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
    'sympy': ('https://docs.sympy.org/latest/', None),
    'control': ('https://python-control.readthedocs.io/en/latest/', None),
    "scipy": ("https://docs.scipy.org/doc/scipy/", None),
    "bokeh": ("https://docs.bokeh.org/en/latest/", None),
    "panel": ("https://panel.holoviz.org/", None),
    "param": ("https://param.holoviz.org/", None),
    "ipywidgets": ("https://ipywidgets.readthedocs.io/en/stable/", None),
}


def linkcode_resolve(domain, info):
    return None


# -- Options for matplotlib plot_directive ------------------------------------

plot_formats = ["png"]


# -- Options for sphinx_plotly_directive --------------------------------------

plotly_include_source = True
plotly_include_directive_source = False
plotly_iframe_height = "375px"
plotly_formats = ["png"]
# plotly_formats = ["png", "pdf", "html"]
plotly_intercept_code = _modify_code


# -- Options for sphinx_panel_screenshot --------------------------------------

browser = "chrome"
home_folder = os.path.expanduser("~")
browser_path = os.path.join(home_folder, "selenium/chrome-linux/chrome")
browser_driver_path = os.path.join(home_folder, "selenium/drivers/chromedriver")

# browser = "firefox"
# home_folder = os.path.expanduser("~")
# browser_path = os.path.join(home_folder, "selenium/firefox/firefox")
# browser_driver_path = os.path.join(home_folder, "selenium/drivers/geckodriver")


driver_options = [
    "--headless",
    "--disable-dev-shm-usage",  # overcome limited resource problems
    "--no-sandbox"              # Bypass OS security model
]

panel_screenshot_small_size = [800, 575]
panel_screenshot_intercept_code = _modify_iplot_code
panel_screenshot_browser = browser
panel_screenshot_browser_path = browser_path
panel_screenshot_driver_path = browser_driver_path
panel_screenshot_driver_options = driver_options
panel_screenshot_formats = ["small.png"]
# panel_screenshot_formats = ["small.png", "large.png", ("pdf", 150), "html"]
# panel_screenshot_pdf_from = "small.png"
panel_screenshot_postprocess_image = postprocess_KB_interactive_image

postprocess_func = lambda ns, size, img: postprocess_KB_interactive_image(
    ns, size, img,
    panel_screenshot_browser,
    panel_screenshot_browser_path,
    panel_screenshot_driver_path,
    panel_screenshot_driver_options
)

panel_screenshot_postprocess_image = postprocess_func


# -- Options for sphinx_k3d_screenshot ----------------------------------------

k3d_screenshot_browser = browser
k3d_screenshot_browser_path = browser_path
k3d_screenshot_driver_path = browser_driver_path
k3d_screenshot_driver_options = driver_options
k3d_screenshot_intercept_code = _modify_code
k3d_screenshot_formats = ["small.png"]
# k3d_screenshot_formats = ["small.png", "large.png", "pdf", "html"]
# while k3D maintain the camera orientation, the actual view appear to be
# zoomed out when a screenshot is taken. To zoom into the scene just decrease
# the following factor.
k3d_screenshot_camera_factor = 1


# -- Options for matplotlib's plot directive ----------------------------------

# setup for doctests
plot_pre_code = """import numpy as np
from matplotlib import pyplot as plt
from spb.backends.base_backend import Plot
Plot.__repr__ = Plot.__str__"""

